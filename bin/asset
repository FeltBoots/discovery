#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const clap = require('clap');
const loadConfig = require('../src').config.load;
const types = {
    js: {
        ext: '.js',
        from: fromAssets,
        to: toJsAsset
    },
    css: {
        ext: '.css',
        from: fromAssets,
        to: toCSSAsset
    },
    'libs-js': {
        ext: '.js',
        from: fromLibs,
        to: toJsLib
    },
    'libs-css': {
        ext: '.css',
        from: fromLibs,
        to: toCSSLib
    }
};

function fetchFileContent(filepath) {
    if (!fs.existsSync(filepath)) {
        console.error('File `' + filepath + '` defined in `config.view` is not found');
        return '';
    }

    return fs.readFileSync(filepath, 'utf8');
}

function normFileList(list, baseURI, ext) {
    if (!Array.isArray(list)) {
        return [];
    }

    return list
        .filter(filepath => path.extname(filepath) === ext)
        .map(filepath => path.resolve(baseURI, filepath));
}

function fromAssets(view, baseURI, ext) {
    return normFileList(view.assets, baseURI, ext);
}

function fromLibs(view, baseURI, ext) {
    if (!view.libs) {
        return null;
    }

    return Object.keys(view.libs).map(name => {
        let libConfig = view.libs[name];

        if (typeof libConfig === 'string') {
            libConfig = {
                files: [libConfig]
            };
        } else if (Array.isArray(libConfig)) {
            libConfig = {
                files: libConfig
            };
        }

        return {
            name: libConfig.name ? String(libConfig.name) : name,
            files: normFileList(libConfig.files, baseURI, ext)
        };
    }).filter(config => config.files.length);
}

function toConcatContent(assets) {
    return assets.map(filepath => fetchFileContent(filepath)).join('');
}

function toJsAsset(assets) {
    return assets.map(filepath => 
        `\n!(function(module, exports){\n${fetchFileContent(filepath)}\n}).call(this);\n`
    ).join('');
}

function toCSSAsset(assets) {
    return toConcatContent(assets);
}

function toJsLib(libs) {
    return libs.map(({ name, files }) =>
        `\nexport const ${name} = (function(module, exports){var exports = {};\nvar module = { exports: exports };\n${
            toConcatContent(files)
        }\nreturn module.exports}).call(this);\n`
    ).join('');
}

function toCSSLib(libs) {
    return libs.map(({ files }) => toConcatContent(files)).join('');
}

function generateAsset(view = {}, type) {
    const baseURI = view.basedir || view.base || '';
    const config = types[type];

    return Promise.resolve(
        config.to(
            config.from(view, baseURI, config.ext)
        )
    );
};

// define command
const command = clap.create('asset', '[config]')
    .option('-c, --config <filename>', 'Path to config (JavaScript or JSON file)')
    .option('-m, --model <name>', 'Specify a model (multi-model mode only)')
    .option('-t, --type <type>', 'Specify a type of asset (js or css)')
    .option('-o, --output <filename>', 'Output file')
    .version(require('../package.json').version)
    .action(function(args) {
        const configFile = this.values.config || args[0];
        const modelName = this.values.model || args[1];
        const outputFile = this.values.output || null;
        const type = this.values.type;

        if (!modelName) {
            console.error('Model name is not specified. Use `--model` option to specify a model');
            process.exit(2);
        }

        if (!type) {
            console.error('Asset type is not specified. Use `--type` option to specify a type');
        }

        if (!types.hasOwnProperty(type)) {
            console.error('Wrong asset type: ' + type);
            process.exit(2);
        }

        const config = loadConfig(configFile);
        const modelConfig = Array.isArray(config.models) ? config.models.find(model => model.slug === modelName) : null;

        if (!modelConfig) {
            console.error(
                'Model `' + modelName + '` is not found in config. ' +
                'Available models: ' +
                    (config.models.length ? config.models.map(model => model.slug).join(', ') : '<no model is available>')
            );
            process.exit(2);
        }

        generateAsset(modelConfig.view, type).then(asset => {
            if (outputFile) {
                fs.writeFileSync(
                    path.resolve(process.cwd(), outputFile),
                    asset,
                    'utf8'
                );
                return;
            }

            // send data to parent process if run as a child process
            if (typeof process.send === 'function') {
                process.send(asset);
                return;
            }

            // otherwise write to stdout
            console.log(asset);
        }, e => {
            console.error(e);
            process.exit(2);
        });
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
