#!/usr/bin/env node
const path = require('path');
const fs = require('fs');
const clap = require('clap');
const loadConfig = require('../src').config.load;
const getData = require('../src').getData;

// define command
const command = clap.create('collect-data', '[config] [model]')
    .option('-c, --config <filename>', 'Specify path to config (JavaScript or JSON file)')
    .option('-m, --model <name>', 'Specify the model id (slug)')
    .option('--cache [dir]', 'Enable data caching and specify path for cache files, use working directory when is not set',
        (value = '') => path.resolve(process.cwd(), value)
    )
    .option('-o, --output <filename>', 'Output file',
        (value = '') => path.resolve(process.cwd(), value)
    )
    .version(require('../package.json').version)
    .action(function(args) {
        const configFile = this.values.config || args[0];
        const modelName = this.values.model || args[1];
        const outputFile = this.values.output || null;
        const cachedir = this.values.cache || false;

        if (!modelName) {
            console.error('Model name is not specified. Use `--model` option to specify a model');
            process.exit(2);
        }
        const config = loadConfig(configFile, { cachedir });
        const modelConfig = Array.isArray(config.models) ? config.models.find(model => model.slug === modelName) : null;

        if (!modelConfig) {
            console.error(
                'Model `' + modelName + '` is not found in config. ' +
                'Available models: ' +
                    (config.models.length ? config.models.map(model => model.slug).join(', ') : '<no model is available>')
            );
            process.exit(2);
        }

        getData(modelConfig).then(model => {
            if (outputFile) {
                fs.writeFileSync(outputFile, JSON.stringify(model), 'utf8');
                return;
            }

            // send data to parent process if run as a child process
            if (typeof process.send === 'function') {
                process.send(model);
                return;
            }

            // otherwise write to stdout
            console.log(JSON.stringify(model));
        }, e => {
            console.error(e);
            process.exit(2);
        });
    });

// run command
try {
    command.run();
} catch (e) {
    // output user frendly message if cli error
    if (e instanceof clap.Error) {
        console.error(e.message || e);
        process.exit(2);
    }

    // otherwise re-throw exception
    throw e;
}
